
Program program_before_comments = 
     aspect.a {: return a; :}
  ;
  
Aspect aspect =
     ASPECT IDENTIFIER.name stmt_separator_list help_comment.comments* aspect_body.body* END stmt_separator_opt_list 
	 	{: //return aspect(name, comments, body);
		 	List<Properties> prop = new List<Properties>();
	        List<Methods> methods = new List<Methods>();
	        List<Patterns> patterns = new List<Patterns>();
	        List<Actions> actions = new List<Actions>();
	        
	        if(body != null) {
	            for(Object obj : body) {
	            	Symbol propOrMethodOrPatternOrAction = (Symbol)obj;
	                if(propOrMethodOrPatternOrAction instanceof Properties) {
	                    prop.add((Properties) propOrMethodOrPatternOrAction);
	                } else if(propOrMethodOrPatternOrAction instanceof Methods) {
	                    methods.add((Methods) propOrMethodOrPatternOrAction);
	                } else if(propOrMethodOrPatternOrAction instanceof Patterns) {
	                    patterns.add((Patterns) propOrMethodOrPatternOrAction);
	                } else if(propOrMethodOrPatternOrAction instanceof Actions) {
	                    actions.add((Actions) propOrMethodOrPatternOrAction);
	                } else {
	                    //NB: programmatic error, not parser error
	                    int pos = propOrMethodOrPatternOrAction.getStart();
	                    int line = Symbol.getLine(pos);
	                    int col = Symbol.getColumn(pos);
	                    throw new RuntimeException("Symbol in body is not a Property, a Method, a Pattern, or an Action: " + getPosString(propOrMethodOrPatternOrAction) + "  " + propOrMethodOrPatternOrAction);
	                }
	            }
	        }
	        return new Aspect(name, nullToEmpty(comments), prop, methods, patterns, actions); :}
  ;
  
Body aspect_body =
     properties_block.p stmt_separator_opt_list {: return p; :}
  |  methods_block.m stmt_separator_opt_list {: return m; :}
  |  patterns_block.p stmt_separator_opt_list {: return p; :}
  |  actions_block.a stmt_separator_opt_list {: return a; :}
  ;

Patterns patterns_block =
	 PATTERNS stmt_separator_list patterns_body.body* END {: return new Patterns(body); :}
  ;

Pattern patterns_body =
     IDENTIFIER.name COLON pattern_designators.pd stmt_separator_list {: return new Pattern(name, pd); :}
  ;

Expr pattern_designators =
     pattern_designators_and.pd {: return pd; :}
  |  pattern_designators.l OR pattern_designators_and.pd {: return new OrExpr(l, pd); :}
  ;
  
Expr pattern_designators_and = 
     pattern_designators_unary.pd {: return pd; :}
  |  pattern_designators_and.l AND pattern_designators_unary.pd {: return new AndExpr(l, pd); :}
  ;

Expr pattern_designators_unary = 
     pattern_designator.pd {: return pd; :}
  |  NOT pattern_designator.pd {: return new NotExpr(pd); :}
  ;

Expr pattern_designator =
     LPAREN pattern_designators.pd RPAREN {: return pd; :}
  |  CALL LPAREN pattern_select.p RPAREN {: return new PatternDesignator("call", new List().add(p)); :}
  |  EXECUTION LPAREN pattern_select.p RPAREN {: return new PatternDesignator("execution", new List().add(p)); :}
  |  MAINEXECUTION LPAREN RPAREN {: return new PatternDesignator("mainexecution", new List()); :}
  |  OPERATORS LPAREN operator_select.p RPAREN {: return new PatternDesignator("op", new List().add(p)); :}
  |  SET LPAREN pattern_select.p RPAREN {: return new PatternDesignator("set", new List().add(p)); :}
  |  GET LPAREN pattern_select.p RPAREN {: return new PatternDesignator("get", new List().add(p)); :}
  |  LOOP LPAREN pattern_select.p RPAREN {: return new PatternDesignator("loop", new List().add(p)); :}
  |  LOOPBODY LPAREN pattern_select.p RPAREN {: return new PatternDesignator("loopbody", new List().add(p)); :}
  |  LOOPHEAD LPAREN pattern_select.p RPAREN {: return new PatternDesignator("loophead", new List().add(p)); :}
  |  WITHIN LPAREN construct_type.n COMMA pattern_select.p RPAREN {: return new PatternDesignator("within", new List().add(n).add(p)); :}
  |  IDENTIFIER.name {: return new NameExpr(new Name(name)); :}
  ;

Name operator_select = 
     PLUS {: return new Name("PlusExpr"); :} 
     |MINUS {: return new Name("MinusExpr"); :}
     |STAR {: return new Name("MTimesExpr"); :}
     |ETIMES{: return new Name("ETimesExpr"); :}
     |MLDIV {: return new Name("MLDivExpr"); :}
     |ELDIV {: return new Name("ELDivExpr"); :}
     |MDIV {: return new Name("MDivExpr"); :}
     |EDIV {: return new Name("EDivExpr"); :}
     |MPOW {: return new Name("MPowExpr"); :}
     |EPOW {: return new Name("EPowExpr"); :}
     |IDENTIFIER.name {: return new Name(name); :}
     ;
Name pattern_select = 
	pattern_target.s {: return s; :}
  |	pattern_target.s LPAREN list_dotdot.ls RPAREN 
		{: int num = ls.getNumChild(); String pattern = s.getID()+"$"+ls.getNumChild(); if(num > 0 && ((Name)ls.getChild(ls.getNumChild()-1)).getID().compareTo("..") == 0) pattern += "+"; return new Name(pattern); :}
  ;

Name pattern_target =
	 pattern_target_unit.u {: return u; :}
  |  pattern_target.t pattern_target_unit.u {: return new Name(t.getID() + u.getID()); :}
  ;

Name pattern_target_unit =
	 STAR {: return new Name(".*"); :}
  |  IDENTIFIER.name {: return new Name(name); :}
  ;
  
/*
Name pattern_target =
	 STAR {: return new Name(".*"); :}
  |  IDENTIFIER.name {: return new Name(name); :}
  |  IDENTIFIER.name STAR {: return new Name(name + ".*"); :}
  |  STAR IDENTIFIER.name {: return new Name(".*" + name); :}
  |  IDENTIFIER.name1 STAR IDENTIFIER.name2 {: return new Name(name1 + ".*" + name2); :}
  ;
*/

List list_dotdot =
	 {: return new List<Name>(); :}
  |  list_star.l {: return l; :}
  |  DOTDOT {: return new List<Name>().add(new Name("..")); :}
  |  list_star.l COMMA DOTDOT {: return l.add(new Name("..")); :}
  ;
  
List list_star =
	 STAR {: return new List<Name>().add(new Name("*")); :}
  |  list_star.l COMMA STAR {: return l.add(new Name("*")); :}
  ;
  
Actions actions_block =
	 ACTIONS stmt_separator_list actions_body.body* END {: return new Actions(body); :}
  ;
  
AspectAction actions_body =
     IDENTIFIER.name COLON action_type.type IDENTIFIER.pattern COLON input_params.in stmt_separator help_comment.comments* stmt_or_function.body* END stmt_separator_list
         {: //return action(name, type, pattern, in, comments, body);
         	List<Stmt> stmts = new List<Stmt>();
	        List<Function> nestedFunctions = new List<Function>();
	        
	        if(body != null) {
	            for(Object obj : body) {
	            	Symbol stmtOrFcn = (Symbol) obj;
	                if(stmtOrFcn instanceof Stmt) {
	                    stmts.add((Stmt) stmtOrFcn);
	                } else if(stmtOrFcn instanceof Function) {
	                    nestedFunctions.add((Function) stmtOrFcn);
	                } else {
	                    //NB: programmatic error, not parser error
	                    int pos = stmtOrFcn.getStart();
	                    int line = Symbol.getLine(pos);
	                    int col = Symbol.getColumn(pos);
	                    throw new RuntimeException("Symbol in body is neither a Stmt nor a Function: " + getPosString(stmtOrFcn) + "  " + stmtOrFcn);
	                }
	            }
	        }
	        return annotateWithComments(new AspectAction(name, type.getID(), pattern, nullToEmpty(in), nullToEmpty(comments), stmts, nestedFunctions)); :}
	        
  |  IDENTIFIER.name COLON action_type.type IDENTIFIER.pattern stmt_separator help_comment.comments* stmt_or_function.body* END stmt_separator_list
         {: //return action(name, type, pattern, null, comments, body);
         	List<Stmt> stmts = new List<Stmt>();
	        List<Function> nestedFunctions = new List<Function>();
	        List<Name> in = null;
	        
	        if(body != null) {
	            for(Object obj : body) {
	            	Symbol stmtOrFcn = (Symbol) obj;
             if(stmtOrFcn instanceof Stmt) {
	                    stmts.add((Stmt) stmtOrFcn);
	                } else if(stmtOrFcn instanceof Function) {
	                    nestedFunctions.add((Function) stmtOrFcn);
	                } else {
	                    //NB: programmatic error, not parser error
	                    int pos = stmtOrFcn.getStart();
	                    int line = Symbol.getLine(pos);
	                    int col = Symbol.getColumn(pos);
	                    throw new RuntimeException("Symbol in body is neither a Stmt nor a Function: " + getPosString(stmtOrFcn) + "  " + stmtOrFcn);
	                }
	            }
	        }
	        return annotateWithComments(new AspectAction(name, type.getID(), pattern, nullToEmpty(in), nullToEmpty(comments), stmts, nestedFunctions)); :}
  ;

Name action_type = 
     BEFORE {: return new Name("before"); :}
  |  AFTER {: return new Name("after"); :}
  |  AROUND {: return new Name("around"); :}
  ;
  
Name construct_type = 
     STAR {: return new Name("*"); :}
  |  AFUNCTION {: return new Name("function"); :}
  |  ACLASS {: return new Name("class"); :}
  |  AASPECT {: return new Name("aspect"); :}
  |  ASCRIPT {: return new Name("script"); :}
  |  ALOOP {: return new Name("loop"); :}
  ;
