# specifies builtins, in a tree structure, with annotated information
# this list is used to generate the java code for the builtins (via 'genBuiltin.py') 
# Syntax:
# <name>; <parent>; <tag_1>; <tag_2>; ... ; <tag_n>
# [  - <tag_n+1>; <tag_n+2>; ... ; <tag_n+m>]
# [  - <tag_n+m+1>; ... ]
# [  ...]
#
# - if no parent is specified then the most recent name is assumed
# - the most recent comment gets preserved and annotated to the java code
# - all parent classes will be renamed as Abstract<Name>, except the root, "builtin"
# - all classes will have their first letter capitalized
# - the overall parent class 'Builtin' - is treated specially, so doesn't need to
#   specifically listed - we nevertheless use an explitic root
# - Tags are optional -- they specify extra properties that the builtins have.
#   Both internal nodes (abstract builtins) and leafs (actual
#   builtins) can have tags. a tag will force some extra code to be
#   inserted into the buitin, and/or force it to implement some extra interface.
# - if a line gets too long, tags can be continued on the next lines, all starting
#   with '-'. It is assumed that a line starting with whitespace+'-' continues the
#   tag definitions of the previous builtin
#
# tags:
# - args, args(), args(n), args(m,n)
#     Defines the allowable number of parameters, via the interface
#     ArityDefined. args, args() will add the interface for abstract
#     builtins, args(n) sets a fixed arity, args(m,n) a variadic
#     range, 'inf' is infinity (i.e. args(2,inf) means 2 or more args)
# - Class(<expr>)
#     Defines what the Matlab classes of outputs are, given the classes of the
#     input arguments. The language is defined in ClassTagLanguage.txt. Examples:
#        Class(double|single double|single->double)
#        Class(coerce(char|logical->double, numeric->0))
#        Class(char char->char, numeric 0|double ->0,  double|1 numeric->1)
#        Class(none ->double)
#        Class(parent any*)
# - Matlabclass(<expr>)
#     Allows alternative definition of class propagation that more exacty follows
#     Matlab semantics. This can only be defined for builtins for which 'Class' is defined.
# -abstract
#     makes this builtin abstract. By default, all non-terminal node in the builtin tree are abstract
#
# Categories of functions
# - pure/impure: pure functions have no side effects, change no state, always return the same result
# - matrix:      args/operands/results are of class numerical, char, logical
# - cell:        operates on cells
# - struct:      operates on structs
# - object:      operates on objects
# - versatile:   operates on multiple kinds of classes - or subgroup of functions operates on multiple kinds of classes
# - anyMatrix:   operates on any matrix class
# - numeric:     operates on numerical classes - char/logical may get coerced to double
# - float:       operates on floats
# - proper/improper: proper functions have strict arity, and the arguments are operands, rather than options
# - unary, binary: function takes in exactly one, two operatnds, respectively
# - elemental:   operates on matrizes (or expanded scalars) elemental, and the result has the same shape as the arg
# - array:       operates on a whole matrix
# - dimensionSensitive: function is of the form f(M,[dim]), i.e. there is a second optional parameter specifying along which dimension to operate
# - dimensionCollapsing: function that collapses a dimension (optional second arg tells which)

# TODO
# - class is not impure
# - mfilename is matlab system
# - better categorize matlab system stuff
# - better categorize operator vs matrix operator, and the binary vs
# - group explicit indexing
# - should it be named <type>Result<..>?
# - change tag processing to annotate 'args' if classes are defined
# - new tag "outs"?
# - need a category for function_handle functions?
# - append multiple comments together -> should they become javadoc?
# - create a new class like MatlabClass - if defined, the actual matlab behavior is different, this also needs
#    - a way to refer to the 'simlified' declaration, maybe? - like the 'parent' node
#    - an output called 'error' - if any output is 'error', the result is error
# - create categories relating to complex vs real
# - conversion vs query, what's the same, what's different?? define properly
# - investigate whether query, constructor etc. functions need the proper/improper categories
# - create a way of just returning the dominant arg, where a list of dominant args is given


root; builtin

# pure functions have no side effects and always return the same value, depending only on arguments
pureFunction; root


# function operates on matrizes (numerical,char,logical)
matrixFunction; pureFunction

# **************************************************************************************
# constant function - there are few of these, most 'constants' take optional shape args
constant; matrixFunction

doubleConstant; constant; 
-Class(none -> double)
-Shape([]->$)
pi
-isComplex(A*->NUMAARGS==0?R)
i
-isComplex(A*->NUMAARGS==0?X:)
j
-isComplex(A*->NUMAARGS==0?X:)


# ****************************************************************************************
# general function - operates on any matrix, sometimes with restrictions
anyMatrixFunction; matrixFunction


# any matrix functions with fixed arity, where all arguments are numeric operands
properAnyMatrixFunction; anyMatrixFunction

# unary function operating on a general matrix
unaryAnyMatrixFunction; properAnyMatrixFunction


# elemental unary function operating on a general matrix
elementalUnaryAnyMatrixFunction; unaryAnyMatrixFunction; abstract

# matrix-wise unary function operating on a general matrix
arrayUnaryAnyMatrixFunction; unaryAnyMatrixFunction; abstract

# binary function operating on a general matrix
binaryAnyMatrixFunction; properAnyMatrixFunction


# elemental binary function operating on a general matrix
elementalBinaryAnyMatrixFunction; binaryAnyMatrixFunction; abstract

# matrix-wise unary function operating on a general matrix
arrayBinaryAnyMatrixFunction; binaryAnyMatrixFunction; abstract



# improper numerical matrix functions don't have a fixed arity, and take (optional) extra
# arguments that either options or different possible operands.
improperAnyMatrixFunction; anyMatrixFunction



diagonalSensitive; improperAnyMatrixFunction
-Class(matrix matrix? -> 0)
-Shape(M,$?->M)
-isComplex(R,A? -> R || X,A? -> A)
tril
triu
diag;; Shape([m,n],k=minimum(m,n)->[k,1])


# functions of the form f(matrix,[dimension]), where matrix is any matrix
dimensionSensitiveAnyMatrixFunction; improperAnyMatrixFunction

# functions that collapse the specified dimension
dimensionCollapsingAnyMatrixFunction; dimensionSensitiveAnyMatrixFunction; abstract



# ***************************************************************************************
# numeric function - operates on any numeric matrix, chars and logicals are coerced to double
# with the restriction that int or single argument types need to agree
# - some actual Matlab functions don't actually coerce logicals and or chars!
numericFunction; matrixFunction


# numeric matrix functions with fixed arity, where all arguments are numeric operands
# should this be called something related to operator?
properNumericFunction; numericFunction

# unary numeric function
unaryNumericFunction; properNumericFunction
-Class(numeric -> 0, char|logical -> double)
-Shape($|M->M)
-isComplex(A->R)
elementalUnaryNumericFunction; unaryNumericFunction; abstract
real
imag
-isComplex(A->X)
abs
conj;; MatlabClass(logical->error, natlab)
sign;; MatlabClass(logical -> error, natlab)

elementalUnaryArithmetic; elementalUnaryNumericFunction
-isComplex(A->NUMXARGS>0?X:R)
uplus
uminus

RoundingOperation; elementalUnaryNumericFunction
-MatlabClass(logical -> error, natlab)
-isComplex(A->NUMXARGS>0?X:R)
fix;; MatlabClass(logical->double, natlab)
round
floor
ceil

arrayUnaryNumericFunction; unaryNumericFunction

arrayUnaryArithmetic; arrayUnaryNumericFunction; abstract


# binary numeric function - doesn't mix integers
binaryNumericFunction; properNumericFunction
-Class(coerce(logical|char->double, (numeric double|0->0) | (double|1 numeric->1)))
-MatlabClass((int logical)|(logical int)->error, natlab)
-Shape(M,M?->M)
#TODO@Vineet insert iscomplex equation. Example of binary numeric functions?

# elemental binary numeric matrix function
elementalBinaryNumericFunction; binaryNumericFunction
#imporoper? - supports 1 arg
complex
-isComplex(R,R? -> X)
-Class(coerce(logical|char->double, (numeric (double|0)? ->0) | (double|1 numeric->1)))
-MatlabClass(char|logical -> error, char|logical any->error, any char|logical->error, natlab)

# elemewise binary arithmetic
elementalBinaryArithmetic; elementalBinaryNumericFunction
-Shape($|M,$|M->M)
-isComplex(R,R ->R || A,A->NUMXARGS>0?X:A)
plus
minus
times
# integers can only be combined with scalar doubles
power;; MatlabClass(logical 0->error, parent);; Shape($|M,$|M->M)

dividingElementalArithmetic; elementalBinaryArithmetic
-MatlabClass(logical 0->error, parent)
-Shape($|M,$|M->M)
-isComplex(A,A->A) 
#TODO@Vineet - tweak the match algo to cover specific cases. Most of the cases will be either R or X. Deal with corner cases like 0,i./i, etc.
# the following do not allow both args to be double under certain circumstances (...)
ldivide
rdivide
mod
rem

# array wise binary numeric matrix function
arrayBinaryNumericFunction; binaryNumericFunction
-Shape(M,M,anyDimensionLT(3)->M)
-isComplex(A,A,R?->R)
#TODO@Vineet confirm if the output has to be real ?
cross


# binary matrix arithmetic - doesn't mix integer types
arrayBinaryArithmetic; arrayBinaryNumericFunction
-MatlabClass(logical 0->error, parent)
-Shape([m,n],[n,k]->[m,k])
-isComplex(X,X ->R || R,R ->R || A,A->NUMXARGS>0?X:A)
mtimes;; MatlabClass(logical 0->double, parent);; Shape([m,n],[n,k]->[m,k]||$,[m,n]->[m,n]||[m,n],$->[m,n])
# integers can only be comibned with scalar doubles -- or not?
mpower;; Shape($,$|M->M||$|M,$->M)
dividingArrayArithmetic; arrayBinaryArithmetic
-Shape($|M,$|M->M)
mldivide
mrdivide


# improper numerical matrix functions don't have a fixed arity, and take (optional) extra
# arguments that either options or different possible operands.
improperNumericFunction; numericFunction

# functions of the form f(matrix1,matrix2,...,matrixk,[dimension]), where matrix is any matrix
dimensionSensitiveNumericFunction; improperNumericFunction
# TODO dot results in floats - but has the same input constraints as numeric - different category? not a builtin?
dot
-Class(coerce(logical|char->double,(single float)|(float single)->single || numeric double|0->double || double|1 numeric->double) (numeric|logical)?)
-MatlabClass(logical any->error, natlab)
-Shape([1,n]|[n,1],[1,n]|[n,1]->$||M,M,M(1)=1->M)


# functions that collapse the specified dimension
dimensionCollapsingNumericFunction; dimensionSensitiveNumericFunction

minOrMax; dimensionCollapsingNumericFunction
-Class(matrix any (numeric|logical)->0 double, logical logical->logical double, coerce(logical|char->double, numeric (double|0)?->0 double || double|1 numeric->1 double), matrix->0 double)
-MatlabClass(logical logical->logical double, char|logical -> error, char|logical any->error, any char|logical->error, natlab)
-Shape([1,n]|[n,1]->$||M,M(1)=1->M||M,M->M||M,[],$,n=previousScalar(),M(n)=1->M)
min
max

# median does not support logical matrizes
median;; Shape([1,n]|[n,1]->$||M,M(1)=1->M||M,M->M||M,$,n=previousScalar(),M(n)=1->M)



# ***************************************************************************************
# operatoes on floating point matrizes
floatFunction; matrixFunction

# proper float functions have a fixed arity, and all operands are floats
properFloatFunction; floatFunction

# unary functions operating on floating point matrizes
unaryFloatFunction; properFloatFunction
-Class(float->0)
-Shape($|M->M)
-isComplex(A->NUMXARGS>0?X:R)

# elemental unary functions operating on floating point matrizes
elementalUnaryFloatFunction; unaryFloatFunction
sqrt
realsqrt
erf
erfinv
erfc
erfcinv
gamma
gammaln
exp
log
log2
log10

forwardTrigonometricFunction; elementalUnaryFloatFunction
radianTrigonometricFunction; forwardTrigonometricFunction
sin
cos
tan
cot
sec
csc

degreeTrigonometricFunction; forwardTrigonometricFunction
sind
cosd
tand
cotd
secd
cscd

hyperbolicTrigonometricFunction; forwardTrigonometricFunction
sinh
cosh
tanh
coth
sech
csch

inverseTrigonmetricFunction; elementalUnaryFloatFunction
radianInverseTrigonmetricFunction; inverseTrigonmetricFunction
asin
acos
atan
acot
asec
acsc

degreeInverseTrigonmetricFunction; inverseTrigonmetricFunction
asind
acosd
atand
acotd
asecd
acscd

hyperbolicInverseTrigonmetricFunction; inverseTrigonmetricFunction
asinh
acosh
atanh
acoth
asech
acsch




# matrix-wise unary function operating on floating point matrizes
arrayUnaryFloatFunction; unaryFloatFunction

# unary function operating on square floating point matrix
squareArrayUnaryFloatFunction; arrayUnaryFloatFunction
logm
sqrtm
expm
inv


# binary matrix function operaitng on float matrices
binaryFloatFunction; properFloatFunction
-Class(float double|0 -> 0, double|1 float -> 1)
-Shape($|M,$|M->M)

# elemental binary functino operating on floats matrizes
elementalBinaryFloatFunction; binaryFloatFunction
atan2

# matrix-wise binary funciton operating on float matrices
arrayBinaryFloatFunction; binaryFloatFunction
hypot


# improper float matrix functions do not have a fixed arity, and extra arguments are either
# options or different possible operands.
improperFloatFunction; floatFunction
eps;; Class(none->double, float->0, typeString(float)) ;; Shape(M->M||'double'|'single'->$)

# functions of the form f(matrix,[dimension])
dimensionSensitiveFloatFunction; improperFloatFunction
-Class(float (numeric|logical)? -> 0)
-Shape(M,$?->M)
# cumsum coerces logicals to double
cumsum;; Class(coerce(logical->double, parent))
cumprod

# numeric function that collapses a dimension (optional second arg tells which)
dimensionCollapsingFloatFunction; dimensionSensitiveFloatFunction
mode;; Shape($->$||M,M(1)=1->M||M,$,n=previousScalar(),M(n)=1->M)
prod;; Shape($->$||M,M(1)=1->M||M,$,n=previousScalar(),M(n)=1->M)
#TODO - sum takes a possible string parameter
sum;; Class(coerce(int|char|logical->double,parent));; Shape([1,n]|[n,1],('double'|'native')?->$||M,M(1)=1,('double'|'native')?->M||M,$,n=previousScalar(),M(n)=1,('double'|'native')?->M) 
-isComplex(X,R? -> X || R,R? -> R)
mean;; Class(coerce(int|char|logical->double,parent));; Shape([1,n]|[n,1]->$||M,M(1)=1->M||M,$,n=previousScalar(),M(n)=1->M)


# standard matrix math functions with optional arguments
matrixLibaryFunction; improperFloatFunction
eig;; Shape([n,n]->[n,1]||[n,n],'nobalance'?->[n,n],[n,n]||[n,n],[n,n],('chol'|'qz')?->[n,1]||[n,n],[n,n],('chol'|'qz')?->[n,n],[n,n])
norm;; Class(float (float|logical|char)?->0);; Shape($|M,($|'fro')?->$)
# query?
rank;; Class(float matrix?->double);; Shape(M,$?->$)

# optional 2 args
cond
# square float -> salar double - should probably be proper
det
rcond
# has 2 operands
linsolve

# TODO
# cros

# factorization functions
facotorizationFunction; improperFloatFunction
schur
# ordschur is not a factorization per se, it massages schur result
ordschur
lu
chol
svd
qr;; Class(float (float|logical)?->0 0 0)



# ***************************************************************************************
# bit functions - usually operates on ints or logicals, some exceptions
bitFunction; matrixFunction
properBitFunction; bitFunction
-Class(uint double|0->0, double|1 uint->1, logical logical->logical, double|logical double|logical->double)
-Shape($|M,$|M->M)
bitand
bitor
bitxor

improperBitFunciton; bitFunction
bitcmp
bitset
bitget
bitshift






# **************************************************************************************
# functions that return doubles or logicals about given values
# TODO - some support only matrizes, others anything
# TODO impure/pure unary for scalar?
matrixQuery; matrixFunction


# return doubles
toDoubleMatrixQuery; matrixQuery
find
-Class(matrix (matrix char?)?->double double double)

unaryToScalarDoubleMatrixQuery; toDoubleMatrixQuery
-Class(matrix->double)

toScalarDoubleMatrixQuery; unaryToScalarDoubleMatrixQuery;
nnz



# return logicals
toLogicalMatrixQuery; matrixQuery

# unary return logicals
unaryToLogicalMatrixQuery; toLogicalMatrixQuery
-Class(matrix->logical)
-Shape($->$)
scalarUnaryToLogicalMatrixQuery; unaryToLogicalMatrixQuery
not
any
all
isreal


elementalUnaryToLogicalMatrixQuery; unaryToLogicalMatrixQuery
isinf
isfinite
isnan


# binary return logicals
binaryToLogicalMatrixQuery; toLogicalMatrixQuery
-Class(matrix matrix -> logical)
-Shape($|M,$|M->M)

elementalBinaryToLogicalMatrixQuery; binaryToLogicalMatrixQuery

# relational operators
relationalOperator; elementalBinaryToLogicalMatrixQuery
-isComplex(A,A->R)
eq
ne
lt
gt
le
ge

# logical operators
logicalOperator; elementalBinaryToLogicalMatrixQuery
and
or
xor




# **************************************************************************************
# functions that create matrix arrays from vectors or values describing the matrizes
matrixCreation; matrixFunction
colon
-Class(coerce(logical -> double, matlab))
-MatlabClass(logical logical logical?->error, logical|double double|logical  (double|logical)? -> double, numeric double|0  (double|0)? -> 0, double|-1 (double|-1 numeric) | numeric -> -1, double|1 numeric double|1 -> 1, char (char|double char)|char -> char)
-Shape($,n=previousScalar(),$,m=previousScalar(),k=minus(m,n)->[1,k]||$,n=previousScalar(),$,i=previousScalar(),$,m=previousScalar(),k=minus(m,n),d=div(k,i)->[1,d])
-isComplex(R* ->R)

# construct arrays via their dimensions; and possibly a type
byShapeAndTypeMatrixCreation; matrixCreation

numericalByShapeAndTypeMatrixCreation; byShapeAndTypeMatrixCreation;
-Class((numeric|logical)* typeString(numeric)|(none->double))
-Shape([]->$||($,n=previousScalar(),add())+->M)
-isComplex(A*->R)
ones
zeros
# Xu add this magic @4:15pm 6th Jan 2013
magic
# eye takes at most 2 dims
eye

floatByShapeAndTypeMatrixCreation; numericalByShapeAndTypeMatrixCreation;
-Class((numeric|logical)* typeString(float)|(none->double))
-Shape([]|'double'|'single'->$||($,n=previousScalar(),add())+->M)
inf
nan



# there is no optional type argument
logicalByShapeAndTypeMatrixCreation; byShapeAndTypeMatrixCreation;
-Class((numeric|logical)*->logical)
true
false


# **************************************************************************************
# matrix constructors
matrixConstructor; matrixFunction
double ;;Class(any->double)
single ;;Class(any->single)
char   ;;Class(any->char)
logical;;Class(any->logical)
int8   ;;Class(any->int8)
int16  ;;Class(any->int16)
int32  ;;Class(any->int32)
int64  ;;Class(any->int64)
uint8  ;;Class(any->uint8)
uint16 ;;Class(any->uint16)
uint32 ;;Class(any->uint32)
uint64 ;;Class(any->uint64)


# ***************************************************************************************
# function operates on cell arrays
cellFunction; pureFunction
cell

cellCat; cellFunction
cellhorzcat
cellvertcat


# ***************************************************************************************
# function operates on structures
structFunction; pureFunction
isfield
struct

# ***************************************************************************************
# function operates on objects
objectFunction; pureFunction
# TODO - should there be the whole pure/impure spiel?


# ***************************************************************************************
# function operates on a mixtures of matrizes, cell arrays, structures and/or objects
versatileFunction; pureFunction

# takes in a matrix or cells of strings
matrixOrCellOfCharFunction; versatileFunction
-Class(any->0)
sort;;Class(any numeric? char? -> 0 double);; Shape(M->M)
unique

# ***************************************************************************************
# char functions operate on strings, or cells of strings
# TODO should it be called string function?
charFunction; matrixOrCellOfCharFunction
properCharFunction; charFunction;
unaryProperCharFunction; properCharFunction;
upper
lower
deblank
# strip
strtrim

improperCharFunction; charFunction
strfind
findstr
strrep

# str[n]cmp[i]
stringCompare; improperCharFunction
strcmp
strcmpi
strncmpi
strncmp

# regular expression functions
regexpFunction; improperCharFunction
regexptranslate
regexp
regexpi
regexprep



# query functions that operate not just on matrizes (c.f. matrixQueryFunction)
versatileQuery; versatileFunction
class
# overloaded for struct for within constructors - struct,char,char..
-Class(any -> char)

# return numericals
doubleResultVersatileQuery; versatileQuery
-Class(any -> double)
-Shape($|M->$)

# TODO fix this output?!
size;; Class(any (numeric|logical)? -> double double double double double double double double double double double double double double double)
-Shape(numOutput(1),$|M,k=previousShapeDim()->[1,k]||numOutput(2),[m,n]->$,$)

# scalar numerical 
scalarDoubleResultVersatileQuery; doubleResultVersatileQuery
length
-isComplex(A -> R)
ndims
numel;; Class(any matrix* -> double)
end;; Class(any numeric numeric -> double)

# return logicals
logicalResultVersatileQuery; versatileQuery
-Class(any->logical)


# return scalar logicals
scalarLogicalResultVersatileQuery; logicalResultVersatileQuery
classQuery; scalarLogicalResultVersatileQuery
isobject
isfloat
isinteger
islogical
isstruct
ischar
iscell
isnumeric

# TODO impure?
isa;; Class(any char -> logical)

scalarLogicalShapeQuery; scalarLogicalResultVersatileQuery
isempty
isvector
isscalar


multiaryToScalarLogicalVersatileQuery; versatileQuery
-Class(any any any*->logical)
# same as isequal; but nan == nan
isequalwithequalnans
# recursive equal all
isequal




versatileConversion; versatileFunction
# TODO improper?
# functions that change the shape
shapeTransformation; versatileConversion
reshape;; Class(any matrix matrix* -> 0)
permute;; Class(any double -> 0)

unaryShapeTransformation; shapeTransformation
-Class(any -> 0)

squeeze
transpose;; Shape([m,n]->[n,m])
-isComplex(R -> R || X->X || A->A )
ctranspose




# all these take multiple args
Concatenation; versatileFunction
horzcat;; Shape(M,n=previousShapeDim(2),K=copy(M),K(2)=0,(#,k=previousShapeDim(2),N=copy(#),N(2)=0,isequal(K,N),n=add(k))*,K(2)=n->K||$,n=previousShapeDim(2),K=copy($),K(2)=0,(#,k=previousShapeDim(2),N=copy(#),N(2)=0,isequal(K,N),n=add(k))*,K(2)=n->K)
-isComplex(A,A+ -> NUMXARGS>0?X:R)
vertcat;; Shape(M,n=previousShapeDim(1),K=copy(M),K(1)=0,(#,k=previousShapeDim(1),N=copy(#),N(1)=0,isequal(K,N),n=add(k))*,K(1)=n->K||$,n=previousShapeDim(1),K=copy($),K(1)=0,(#,k=previousShapeDim(1),N=copy(#),N(1)=0,isequal(K,N),n=add(k))*,K(1)=n->K)
-isComplex(A,A+ -> NUMXARGS>0?X:R)
# generalization of horz/vert cat
cat

indexing; versatileFunction
subsasgn
subsref


mapOperator; versatileFunction
structfun
arrayfun
cellfun



# # special operators ... not sure what to do with them
# nargin - impure?
# nargout
# mfilename
# end - this could be a query







# elementalBinaryOperator; numericalBinaryOperator
# pow2
# #scalbn; ldexp



# eps - float function? but improper - query?










# conversionFunction; constructor
# cell2struct
# struct2cell
# typecast # change datatype without changing underlying data - is this a bit function?
# cast



# other stuff
# complex


# classOperation; pureFunction
# class







# arrayConstructor; arrayOperation






# *** opposite of pure functions *****************************************
impureFunction; root

# dunnno what to do with these
superiorto
superiorfloat;; Class(float* -> char)
#set superior to relationship in oldclass constructor
exit
quit
# only really need one of quit/exit
builtin
# calls builtin - proper

timeFunction; impureFunction
clock;; Class(none -> double);; Shape([]->[1,6])
tic
toc
cputime


matlabSystemFunction; impureFunction
assert
nargoutchk
nargchk
str2func
pause


dynamicMatlabFunction; matlabSystemFunction
eval
evalin
feval
assignin
inputname

matlabEnvironmentFunction; matlabSystemFunction
import
cd
exist
matlabroot
whos
which
version
clear

nargin;; Class(none|char|function_handle->double)
nargout;;Class(none|char|function_handle->double)


# methods, fieldnames takes obj or string, allows extra arg '-full'
methods
fieldnames


reportFunction; impureFunction
# errors should be seprated from warnings and displaying stuff?
disp;; Class(any -> none);; Shape(#->[]);; isComplex(A->X)
display
clc
#TODO rething error
error;;  Class(char? char? any*->error)
warning;;Class(any any* -> char)
echo
# should this be here? - this could be a proper lib function?
diary
# something logging related
# TODO review this:
message;;Class(char any* -> char)
lastwarn
lasterror
format


randomFunction; impureFunction
-Class((numeric|logical)* typeString(float)|(none->double))
-Shape([]->$||($,n=previousScalar(),add())+->M)
rand
randn
randi;; Class(numeric|logical (numeric|logical)* typeString(numeric)|(none->double))
randperm;; Shape($,n=previousScalar()->[1,n])


systemFunction; impureFunction
# should there be a separated operating system category?
computer
beep
dir

operatingSystemCallFunction; systemFunction
unix
dos
system


ioFunction; systemFunction
load
save
input
textscan


posixIoFunction; ioFunction
sprintf;; Class(char any* -> char)
sscanf
fprintf;; Class(double? char any* -> double)
ftell
ferror
fopen
fread
frewind
fscanf
fseek
fwrite
fgetl
fgets
fclose




# *** library funcitons that are not builtins!! TODO **********************
notABuiltin; root
#conv
#dyaddown
#flipud
#linspace
imwrite;; Class(numeric numeric? char matrix*)
sparse;;  Class((double|char|logical) (double|char|logical)* -> 0)
realmax;; Class(typeString(float)|(none->double))
histc;;   Class(numeric numeric numeric? -> double double)
blkdiag;; Class(numeric* -> double)
#toeplitz;;Class(single (single|double)? -> 0, single|double -> 0, double (single|double) -> 1)

# at least variance should be a builtin, std = sqrt(var)
var;; Class(coerce(char|logical -> double, float ->0) numeric? numeric?)
std;; Class(coerce(char|logical -> double, float ->0) numeric? numeric?)




